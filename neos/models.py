# AUTOGENERATED! DO NOT EDIT! File to edit: 03_models.ipynb (unless otherwise specified).

__all__ = ['Model', 'hepdata_like', 'nn_model_maker']

# Cell
import pyhf
import jax
from jax.config import config
from jax.experimental import stax

from .data import get_three_blobs
from .hists import hists_from_nn_bkg_var

# avoid those precision errors!
config.update("jax_enable_x64", True)

pyhf.set_backend(pyhf.tensor.jax_backend())

# Cell
class _Config(object):
    def __init__(self):
        self.poi_index = 0
        self.npars = 2

    def suggested_init(self):
        return jax.numpy.asarray([1.0, 1.0])

    def suggested_bounds(self):
        return jax.numpy.asarray(
            [jax.numpy.asarray([0.0, 10.0]), jax.numpy.asarray([0.0, 10.0])]
        )


class Model(object):
    def __init__(self, spec):
        self.sig, self.nominal, self.uncert = spec
        self.factor = (self.nominal / self.uncert) ** 2
        self.aux = 1.0 * self.factor
        self.config = _Config()

    def expected_data(self, pars, include_auxdata=True):
        mu, gamma = pars
        expected_main = jax.numpy.asarray([gamma * self.nominal + mu * self.sig])
        aux_data = jax.numpy.asarray([self.aux])
        return jax.numpy.concatenate([expected_main, aux_data])

    def logpdf(self, pars, data):
        maindata, auxdata = data
        main, _ = self.expected_data(pars)
        mu, gamma = pars
        main = pyhf.probability.Poisson(main).log_prob(maindata)
        constraint = pyhf.probability.Poisson(gamma * self.factor).log_prob(auxdata)
        # sum log probs over bins
        return jax.numpy.asarray([jax.numpy.sum(main + constraint,axis=0)])


def hepdata_like(signal_data, bkg_data, bkg_uncerts, batch_size=None):
    return Model([signal_data, bkg_data, bkg_uncerts])

# Cell
def nn_model_maker(nn_params):
    # instantiate nn architecture
    _, predict = stax.serial(stax.Dense(5), stax.Relu, stax.Dense(2), stax.LogSoftmax)
    # grab data
    keys = [1, 2, 3]
    batch_size = 5000
    a, b, c = get_three_blobs(keys, batch_size)
    s, b, db = hists_from_nn_bkg_var(predict, nn_params, a, jax.numpy.asarray([b, c]))

    # arbitrary scaling:
    s, b, db = s / 5.0, b / 10.0, db / 10.0
    print(f"model: {s},{b},{db}")
    m = hepdata_like(s, b, db)
    nompars = m.config.suggested_init()
    bonlypars = jax.numpy.asarray([x for x in nompars])
    bonlypars = jax.ops.index_update(bonlypars, m.config.poi_index, 0.0)
    return m, bonlypars